AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a Security Gateway Auto Scaling Group, an external ALB, and optinally a Smart Managemnt Server and a server Auto Scaling Group in a new VPC
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Network Configuration
      Parameters:
      - VpcCidr
      - AvailabilityZones
      - PublicSubnetCidrA
      - PublicSubnetCidrB
      - PublicSubnetCidrC
      - PrivateSubnetCidrA
      - PrivateSubnetCidrB
      - PrivateSubnetCidrC
    - Label:
        default: General Settings
      Parameters:
      - ServicePort
      - AdminEmail
      - ManagementDeploy
      - ServersDeploy
    - Label:
        default: Check Point Gateway Auto Scaling Group Configuration
      Parameters:
      - GatewaysInstanceType
      - GatewaysKey
      - GatewaysMinSize
      - GatewaysMaxSize
      - GatewaysLicense
      - GatewaysPasswordHash
      - GatewaysSIC
    - Label:
        default: Check Point Smart Management Server Configuration (if you choose to deploy a Smart Management Server this section is mandatory)
      Parameters:
      - ManagementInstanceType
      - ManagementKey
      - ManagementPasswordHash 
      - GatewaysPolicy
      - GatewaysBlades
    - Label:
        default: Workload Servers Auto Scaling Group Configuration (if you choose to deploy servers this section is mandatory)
      Parameters:
      - ServersInstanceType
      - ServersKey
      - ServersAMI
    ParameterLabels:
      VpcCidr:
        default: VPC CIDR
      AvailabilityZones:
        default: Availability Zones
      PublicSubnetCidrA:
        default: Public Subnet A
      PublicSubnetCidrB:
        default: Public Subnet B
      PublicSubnetCidrC:
        default: Public Subnet C
      PrivateSubnetCidrA:
        default: Private Subnet A
      PrivateSubnetCidrB:
        default: Private Subnet B
      PrivateSubnetCidrC:
        default: Private Subnet C
      ManagementDeploy:
        default: Deploy Smart Management
      VPC:
        default: VPC
      ManagementInstanceType:
        default: Instance type
      ManagementKey:
        default: Key name
      ManagementPasswordHash:
        default: Password hash
      GatewaysInstanceType:
        default: Instance type
      GatewaysKey:
        default: Key name
      GatewaysMinSize:
        default: Minimum group size
      GatewaysMaxSize:
        default: Maximum group size
      AdminEmail:
        default: Email address
      GatewaysPolicy:
        default: Security Policy
      GatewaysBlades:
        default: Default Blades
      GatewaysLicense: 
        default: License
      GatewaysPasswordHash:
        default: Password hash
      GatewaysSIC:
        default: SIC key
      ServicePort:
        default: Service Port
      ServersDeploy:
        default: Deploy Servers
      ServersAMI:
        default: Amazon Image ID
      ServersInstanceType:
        default: Instance Type
      ServersKey:
        default: Key name
Parameters:
  VpcCidr:
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    Default: '10.0.0.0/16'
  AvailabilityZones:
    Description: 'List of Availability Zones to use for the subnets in the VPC. Note: The logical order is preserved.'
    Type: List<AWS::EC2::AvailabilityZone::Name>
  PublicSubnetCidrA:
    Description: The public subnet of the 1st availability zone CIDR block
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    Default: '10.0.0.0/24'
  PublicSubnetCidrB:
    Description: The public subnet of the 2nd availability zone CIDR block
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    Default: '10.0.2.0/24'
  PublicSubnetCidrC:
    Description: The public subnet of the 3rd availability zone CIDR block (optional, leave the subnet empty if not needed)
    Type: String
    AllowedPattern: (|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2}))
    Default: ''
  PrivateSubnetCidrA:
    Description: The private subnet of the 1st availability zone CIDR block
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    Default: '10.0.1.0/24'
  PrivateSubnetCidrB:
    Description: The private subnet of the 2nd availability zone CIDR block
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    Default: '10.0.3.0/24'
  PrivateSubnetCidrC:
    Description: The private subnet of the 3rd availability zone CIDR block (optional, leave the subnet empty if not needed)
    Type: String
    AllowedPattern: (|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2}))
    Default: '' 
  ServicePort:
    Description: The external Application Load Balancer listens to this port
    Type: Number
    Default: 80
    MinValue: 1
  ManagementDeploy:
    Description: Choose 'No' to use an existing Smart Management Server or to deploy one later
    Type: String
    Default: 'Yes'
    AllowedValues:
    - 'Yes'
    - 'No'
  ManagementInstanceType:
    Type: String
    Default: m4.xlarge
    AllowedValues:
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m4.16xlarge
    ConstraintDescription: must be a valid EC2 instance type
  ManagementKey:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
  ManagementPasswordHash:
    Description: Admin user's password hash (use command \"openssl passwd -1 PASSWORD\" to get the PASSWORD's hash) (optional)
    Type: String
    Default: ''
    AllowedPattern: "[\\$\\./a-zA-Z0-9]*"
  GatewaysInstanceType:
    Type: String
    Default: c4.xlarge
    AllowedValues:
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    ConstraintDescription: must be a valid EC2 instance type
  GatewaysKey:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    MinLength: 1
  GatewaysMinSize:
    Default: 2
    Type: Number
    MinValue: 1
  GatewaysMaxSize:
    Default: 10
    Type: Number
    MinValue: 1
  AdminEmail: 
    Description: Notifications about scaling events will be sent to this email address (optional)
    Type: String
    Default: ''
    AllowedPattern: "(|([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?))"
    ConstraintDescription: must be a valid email address
  GatewaysPolicy:
    Description: The name of the Security Policy package to be installed on the Auto Scaling group gateways
    Type: String
    Default: Standard
    MinLength: 1
  GatewaysBlades:
    Description: Turn on/off the Intrusion Prevention, Application Control, Anti-Virus and Anti-Bot Blades (additional Blades can be manually turned on later)
    Type: String
    AllowedValues:
    - 'On'
    - 'Off'
    Default: 'On'
  GatewaysLicense:
    Type: String
    Default: R80.10-BYOL
    AllowedValues:
    - R80.10-BYOL
    - R80.10-PAYG-NGTP
    - R80.10-PAYG-NGTX
  GatewaysPasswordHash:
    Description: Admin user's password hash (use command \"openssl passwd -1 PASSWORD\" to get the PASSWORD's hash) (optional)
    Type: String
    Default: ''
    AllowedPattern: "[\\$\\./a-zA-Z0-9]*"
  GatewaysSIC:
    Description: Secure Internal Communication activation key
    NoEcho: true
    MinLength: 8
    Type: String
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: Secure Internal Communication activation key should contain only alpha numeric characters and be at least 8 characters long
  ServersDeploy:
    Description: Choose 'No' to manually deploy your workload and the internal Load Balancer
    Type: String
    Default: 'No'
    AllowedValues:
    - 'Yes'
    - 'No'
  ServersAMI:
    Type: AWS::EC2::Image::Id
  ServersInstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  ServersKey:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
Conditions:
  PublicC: !Not
  - !Equals
    - !Ref PublicSubnetCidrC
    - ''
  PrivateC: !Not
  - !Equals
    - !Ref PrivateSubnetCidrC
    - ''
Resources:
  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/CloudFormationTemplate/infrastructure-multi-az.yaml
      Parameters:
        VpcCidr: !Ref VpcCidr
        AvailabilityZones: !Join
        - ','
        - !Ref AvailabilityZones
        PublicSubnetCidrA: !Ref PublicSubnetCidrA
        PublicSubnetCidrB: !Ref PublicSubnetCidrB
        PublicSubnetCidrC: !Ref PublicSubnetCidrC
        PrivateSubnetCidrA: !Ref PrivateSubnetCidrA
        PrivateSubnetCidrB: !Ref PrivateSubnetCidrB
        PrivateSubnetCidrC: !Ref PrivateSubnetCidrC
  MainStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/CloudFormationTemplate/autoscale-quickstart.yaml
      Parameters:
        VPC: !GetAtt
        - VPCStack
        - Outputs.VPC
        ServicePort: !Ref ServicePort
        AdminEmail: !Ref AdminEmail
        ManagementDeploy: !Ref ManagementDeploy
        ServersDeploy: !Ref ServersDeploy
        GatewaysSubnets: !Join
        - ','
        - - !GetAtt 
            - VPCStack
            - Outputs.ExternalSubnetA
          - !GetAtt 
            - VPCStack
            - Outputs.ExternalSubnetB
          - !If
            - PublicC
            - !GetAtt 
              - VPCStack
              - Outputs.ExternalSubnetC
            - !Ref AWS::NoValue
        GatewaysInstanceType: !Ref GatewaysInstanceType
        GatewaysKey: !Ref GatewaysKey
        GatewaysMinSize: !Ref GatewaysMinSize
        GatewaysMaxSize: !Ref GatewaysMaxSize
        GatewaysPolicy: !Ref GatewaysPolicy
        GatewaysBlades: !Ref GatewaysBlades
        GatewaysLicense: !Ref GatewaysLicense
        GatewaysPasswordHash: !Ref GatewaysPasswordHash
        GatewaysSIC: !Ref GatewaysSIC
        ManagementSubnet: !GetAtt 
        - VPCStack
        - Outputs.ExternalSubnetA
        ManagementInstanceType: !Ref ManagementInstanceType
        ManagementKey: !Ref ManagementKey
        ManagementPasswordHash: !Ref ManagementPasswordHash
        ServersSubnets: !Join
        - ','
        - - !GetAtt 
            - VPCStack
            - Outputs.InternalSubnetA
          - !GetAtt 
            - VPCStack
            - Outputs.InternalSubnetB
          - !If
            - PrivateC
            - !GetAtt 
              - VPCStack
              - Outputs.InternalSubnetC
            - !Ref AWS::NoValue
        ServersInstanceType: !Ref ServersInstanceType
        ServersKey: !Ref ServersKey
        ServersAMI: !Ref ServersAMI
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-main'
